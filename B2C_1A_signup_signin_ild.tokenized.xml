<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" TenantId="#{TenantId}#.onmicrosoft.com" PolicyId="B2C_1A_signup_signin_ild" PublicPolicyUri="http://#{TenantId}#.onmicrosoft.com/B2C_1A_signup_signin_ild" TenantObjectId="#{TenantObjectId}#" DeploymentMode="#{PolicyDeploymentMode}#" UserJourneyRecorderEndpoint="urn:journeyrecorder:applicationinsights">
  <!-- Sign In Policy for the Irish Life Digital Portal -->
  <BasePolicy>
    <TenantId>#{TenantId}#.onmicrosoft.com</TenantId>
    <PolicyId>B2C_1A_TrustFrameworkExtensions</PolicyId>
  </BasePolicy>

  <BuildingBlocks>
    <ClaimsSchema>
    <ClaimType Id="requiresMigration">
      <DisplayName>extension_requiresMigration</DisplayName>
      <DataType>boolean</DataType>
      <AdminHelpText>extension_requiresMigration</AdminHelpText>
      <UserHelpText>extension_requiresMigration</UserHelpText>
    </ClaimType>
    <ClaimType Id="extension_requiresMigration">
      <DisplayName>extension_requiresMigration</DisplayName>
      <DataType>boolean</DataType>
      <AdminHelpText>extension_requiresMigration</AdminHelpText>
      <UserHelpText>extension_requiresMigration</UserHelpText>
    </ClaimType>
    <ClaimType Id="tokenSuccess">
      <DisplayName>tokenSuccess</DisplayName>
      <DataType>boolean</DataType>
      <AdminHelpText>tokenSuccess</AdminHelpText>
      <UserHelpText>tokenSuccess</UserHelpText>
    </ClaimType>
    <ClaimType Id="migrationRequired">
      <DisplayName>migrationRequired</DisplayName>
      <DataType>boolean</DataType>
      <AdminHelpText>migrationRequired</AdminHelpText>
      <UserHelpText>migrationRequired</UserHelpText>
    </ClaimType>
  </ClaimsSchema>
</BuildingBlocks>
<ClaimsProviders>
  <ClaimsProvider>
    <DisplayName>Local Account SignIn</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email">
        <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
        <Metadata>
          <Item Key="SignUpTarget">SignUpWithLogonEmailExchange</Item>
          <Item Key="setting.operatingMode">Email</Item>
          <!-- <Item Key="setting.showSignupLink">false</Item>             -->
          <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
        </Metadata>
        <IncludeInSso>false</IncludeInSso>
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInName" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="extension_requiresMigration" />
          <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
          <OutputClaim ClaimTypeReferenceId="password" Required="true" />
          <OutputClaim ClaimTypeReferenceId="objectId" />
          <OutputClaim ClaimTypeReferenceId="authenticationSource" />
        </OutputClaims>
        <ValidationTechnicalProfiles>
          <!--Add user migration validation technical profiles before login-NonInteractive -->

          <!-- Populate extension_requireMigration into the claims pipeline -->
          <ValidationTechnicalProfile ReferenceId="Get-requiresMigration-status-signin" ContinueOnError="false" />

          <!-- If extension_requireMigration is true, call the legacy IdP via the REST API -->
          <ValidationTechnicalProfile ReferenceId="UserMigrationViaLegacyIdp" ContinueOnError="true">
            <Preconditions>
              <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                <Value>extension_requiresMigration</Value>
                <Value>False</Value>
                <Action>SkipThisValidationTechnicalProfile</Action>
              </Precondition>
            </Preconditions>
          </ValidationTechnicalProfile>

          <!-- If the API returned 'tokensuccess', write the new password and unmark the account for migration -->
          <ValidationTechnicalProfile ReferenceId="AAD-WritePasswordAndFlipMigratedFlag" ContinueOnError="false">
            <Preconditions>
              <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                <Value>tokenSuccess</Value>
                <Action>SkipThisValidationTechnicalProfile</Action>
              </Precondition>
            </Preconditions>
          </ValidationTechnicalProfile>

          <!-- Initiate a normal logon against Azure AD B2C -->
          <ValidationTechnicalProfile ReferenceId="login-NonInteractive" />
        </ValidationTechnicalProfiles>
        <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
      </TechnicalProfile>
    </TechnicalProfiles>

  </ClaimsProvider>

  <ClaimsProvider>
    <DisplayName>Local Account SignIn - Read migration status</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="Get-requiresMigration-status-signin">
        <Metadata>
          <Item Key="Operation">Read</Item>
          <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
        </Metadata>
        <IncludeInSso>false</IncludeInSso>
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="signInNames.emailAddress" Required="true" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="objectId" />
          <!-- Set a default value (false) in the case the account does not have this attribute defined -->
          <OutputClaim ClaimTypeReferenceId="extension_requiresMigration" DefaultValue="false" />
        </OutputClaims>
        <IncludeTechnicalProfile ReferenceId="AAD-Common" />
      </TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>
  <ClaimsProvider>
    <DisplayName>REST API to communicate with Legacy IdP</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="UserMigrationViaLegacyIdp">
        <DisplayName>REST API call to communicate with Legacy IdP</DisplayName>
        <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
        <Metadata>
          <Item Key="ServiceUrl">#{PasswordMigrationURL}#?subscription-key=#{Subscription-key}#</Item>
          <Item Key="SendClaimsIn">Body</Item>
          <Item Key="AuthenticationType">Bearer</Item>
          <Item Key="UseClaimAsBearerToken">bearerToken</Item>
          <Item Key="AllowInsecureAuthInProduction">false</Item>
        </Metadata>
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="bearerToken"/>
          <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="userName" />
          <InputClaim ClaimTypeReferenceId="password" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="tokenSuccess" DefaultValue="false"/>
          <OutputClaim ClaimTypeReferenceId="migrationRequired"/>
        </OutputClaims>
        <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
      </TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>
  <ClaimsProvider>
    <DisplayName>Local Account SignIn - Write new password and unmark for migration</DisplayName>
    <TechnicalProfiles>
      <TechnicalProfile Id="AAD-WritePasswordAndFlipMigratedFlag">
        <Metadata>
          <Item Key="Operation">Write</Item>
          <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
        </Metadata>
        <IncludeInSso>false</IncludeInSso>
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
        </InputClaims>
        <PersistedClaims>
          <PersistedClaim ClaimTypeReferenceId="objectId" />
          <PersistedClaim ClaimTypeReferenceId="userPrincipalName" />
          <PersistedClaim ClaimTypeReferenceId="displayName" />
          <PersistedClaim ClaimTypeReferenceId="password" PartnerClaimType="password"/>
          <PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration, DisableStrongPassword" AlwaysUseDefaultValue="true"/>
          <PersistedClaim ClaimTypeReferenceId="migrationRequired" PartnerClaimType="extension_requiresMigration"/>
        </PersistedClaims>
        <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
      </TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>
</ClaimsProviders>
  <UserJourneys>
    <UserJourney Id="SignUpOrSignIn">
      <OrchestrationSteps>
      <!-- Get Access Token -->
      <OrchestrationStep Order="1" Type="ClaimsExchange">
        <ClaimsExchanges>
          <ClaimsExchange Id="RESTTokenProfile" TechnicalProfileReferenceId="REST-AcquireAccessToken" />
        </ClaimsExchanges>
      </OrchestrationStep>
        <OrchestrationStep Order="2" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsigninwithpasswordreset">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="ForgotPasswordExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="SignUp" />
            <ClaimsExchange Id="ForgotPasswordExchange" TechnicalProfileReferenceId="ForgotPassword" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Forgot Password Step -->
        <OrchestrationStep Order="4" Type="InvokeSubJourney">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>isForgotPassword</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <JourneyList>
            <Candidate SubJourneyReferenceId="PasswordReset" />
          </JourneyList>
        </OrchestrationStep>
        <!-- Custom Sign Up Step -->
        <OrchestrationStep Order="5" Type="InvokeSubJourney">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>isSignUp</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <JourneyList>
            <Candidate SubJourneyReferenceId="CustomSignUp" />
          </JourneyList>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
  </UserJourneys>
  <RelyingParty>
    <DefaultUserJourney ReferenceId="SignUpOrSignIn" />
    <UserJourneyBehaviors>
      <SessionExpiryType>Rolling</SessionExpiryType>
      <SessionExpiryInSeconds>900</SessionExpiryInSeconds>
      <JourneyInsights TelemetryEngine="ApplicationInsights" InstrumentationKey="#{AppInsightsKey}#" DeveloperMode="#{AppInsightsDevMode}#" ClientEnabled="false" ServerEnabled="true" TelemetryVersion="1.0.0" />
      <ScriptExecution>Allow</ScriptExecution>
    </UserJourneyBehaviors>
    <TechnicalProfile Id="PolicyProfile">
      <DisplayName>PolicyProfile</DisplayName>
      <Protocol Name="OpenIdConnect" />
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="displayName" />
        <OutputClaim ClaimTypeReferenceId="givenName" />
        <OutputClaim ClaimTypeReferenceId="surname" />
        <OutputClaim ClaimTypeReferenceId="email" />
        <OutputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="email" />
        <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="sub" />
        <OutputClaim ClaimTypeReferenceId="tenantId" AlwaysUseDefaultValue="true" DefaultValue="{Policy:TenantObjectId}" />
      </OutputClaims>
      <SubjectNamingInfo ClaimType="sub" />
    </TechnicalProfile>
  </RelyingParty>
</TrustFrameworkPolicy>